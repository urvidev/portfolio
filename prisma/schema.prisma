//////////////////////////////////////////////////////////////////////////////////////////////
// DO NOT MODIFY THIS FILE                                                                  //
// This file is automatically generated by ZenStack CLI and should not be manually updated. //
//////////////////////////////////////////////////////////////////////////////////////////////

datasource db {
  provider = "postgresql"
  url      = env("SERVER_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum UserStatus {
  INVITED
  VERIFIED
}

/// @@auth
/// @@allow('all', auth().id == this.id)
/// @@allow('all', auth().globalRole == 'ADMIN')
/// @@allow('create', globalRole != 'ADMIN')
/// @@allow('read', true)
model User {
  id                String             @id() @default(uuid())
  name              String?
  email             String?            @unique()
  pictureUrl        String?            @default("https://i.imgur.com/ZdJSK3Y.jpeg")
  tokenInvitation   String?
  status            UserStatus         @default(VERIFIED)
  globalRole        String             @default("USER")
  /// @password
  /// @omit
  password          String?
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @default(now()) @updatedAt()
  blogPosts         BlogPost[]         @relation("user")
  comments          Comment[]          @relation("user")
  portfolioProjects PortfolioProject[] @relation("user")
  experiences       Experience[]       @relation("user")
}

/// @@allow('all', true)
model BlogPost {
  id        String    @id() @default(uuid())
  title     String?
  content   String?
  status    String?
  slug      String?
  userId    String?
  user      User?     @relation(fields: [userId], references: [id], name: "user")
  comments  Comment[] @relation("blogPost")
  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Comment {
  id         String    @id() @default(uuid())
  content    String?
  status     String?
  blogPostId String?
  blogPost   BlogPost? @relation(fields: [blogPostId], references: [id], name: "blogPost")
  userId     String?
  user       User?     @relation(fields: [userId], references: [id], name: "user")
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt()
}

/// @@allow('all', true)
model PortfolioProject {
  id          String   @id() @default(uuid())
  title       String?
  description String?
  imageUrl    String?
  projectUrl  String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}

/// @@allow('all', true)
model Experience {
  id          String   @id() @default(uuid())
  title       String?
  company     String?
  description String?
  startDate   String?
  endDate     String?
  userId      String?
  user        User?    @relation(fields: [userId], references: [id], name: "user")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt()
}
